import { AnyFunction, Enumerated, TMap } from "./typings";
export declare function enumerate<T>(obj: T): Enumerated<T>;
export declare function wait(ms: number): Promise<any>;
export declare function bool(val: any): boolean;
export declare function isArray<T>(obj: any): obj is Array<T>;
export declare function isEmptyArr(collection: any): boolean;
export declare function isEmptyObj(obj: any): boolean;
export declare function isFunction<T>(fn: T): fn is T;
export declare function isFunction(fn: AnyFunction): fn is AnyFunction;
export declare function isTMap<T>(obj: TMap<T>): obj is TMap<T>;
export declare function isObject(obj: any): boolean;
export declare function shallowProperty<T>(key: string): (obj: T) => T extends null ? undefined : T[keyof T];
export declare function getLength(collection: any): number;
export declare function isArrayLike(collection: any): boolean;
export declare function extend(sup: any, child: any): any;
export declare function anyValue(obj: any): boolean;
export declare function equalsAny(obj: any, ...others: any[]): boolean;
export declare function noValue(obj: any): boolean;
export declare function isType<T>(arg: T): arg is T;
